{"version":3,"sources":["webpack:///src/app/mainApp/login/login.module.ts","webpack:///src/app/mainApp/login/login-routing.module.ts","webpack:///src/app/common/services/validators.service.ts","webpack:///src/app/mainApp/login/login/login.component.ts","webpack:///src/app/mainApp/login/login/login.component.html"],"names":["LoginModule","routes","path","component","LoginRoutingModule","forChild","KudosValidatorsService","messageKey","check","control","hasError","validator","required","isAsync","pattern","emailRegex","decimals","replace","toString","value","trim","emptySpace","positiveNumbersOnly","formControl","fieldsNotMatch","uniquenessChecker","valueChanges","pipe","found","isNotUnique","getMessageInterpolationParams","passwordRequirements","passwordRequiredLength","minLength","passwordRequireDigit","match","hasDigit","passwordRequireUppercase","hasCapitalCase","passwordRequireLowercase","hasCapitalLowerCase","LoginComponent","validatorService","router","http","sessionService","titleService","formBuilder","errorMessage","loginForm","displayMessage","validationMessages","genericValidator","loginSubscription","passwordVisible","loading","username","password","setTitle","group","subscribe","processMessages","unsubscribe","i","controls","markAsDirty","updateValueAndValidity","valid","dirty","createNewSession","navigate","loginSubmit","gotoForgotPassword"],"mappings":"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","file":"mainApp-login-login-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { KudosCommonImportsModule } from 'src/app/common-imports.module';\nimport { KudosThirdPartyImportsModule } from 'src/app/third-party-imports.module';\nimport { LoginComponent } from './login/login.component';\nimport { LoginRoutingModule } from './login-routing.module';\n\n@NgModule({\n  declarations: [LoginComponent],\n  imports: [KudosThirdPartyImportsModule, LoginRoutingModule, KudosCommonImportsModule],\n  providers: [],\n  bootstrap: [],\n})\nexport class LoginModule {}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LoginRoutingModule {}\n","import { Injectable } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { debounceTime, switchMap, map, take } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { KudosRegex } from '../constants/constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KudosValidatorsService {\n  getRequiredFieldValidator(messageKey: string) {\n    return {\n      messageKey: messageKey,\n      check: (control: FormControl) => control.hasError('required'),\n      validator: Validators.required,\n      isAsync: false,\n    };\n  }\n\n  getEmailFormatValidator(messageKey: string) {\n    return {\n      messageKey,\n      check: (control: FormControl) => control.hasError('pattern'),\n      validator: Validators.pattern(KudosRegex.emailRegex),\n      isAsync: false,\n    };\n  }\n\n  getNumericFieldValidator(messageKey: string) {\n    return {\n      messageKey: messageKey,\n      check: (control: FormControl) => control.hasError('pattern'),\n      validator: Validators.pattern('^[-+]?(0|[1-9][0-9]*)$'),\n      isAsync: false,\n    };\n  }\n\n  getDecimalValidator(messageKey: string, decimals: number = 2) {\n    return {\n      messageKey: messageKey,\n      check: (control: FormControl) => control.hasError('pattern'),\n      validator: Validators.pattern('^-?\\\\d+(\\\\.\\\\d{1,{0}})?$'.replace('{0}', decimals.toString())),\n      isAsync: false,\n    };\n  }\n\n  getEmptySpaceValidator(messageKey: string) {\n    return {\n      messageKey: messageKey,\n      check: (control: FormControl) => control.hasError('emptySpace'),\n      validator: (control: FormControl) =>\n        (control.value ? control.value : 0).toString().trim() == ''\n          ? {\n              emptySpace: true,\n            }\n          : {},\n      isAsync: false,\n    };\n  }\n\n  getPositiveNumbersValidator(messageKey: string) {\n    return {\n      messageKey: messageKey,\n      check: (control: FormControl) => control.hasError('positiveNumbersOnly'),\n      validator: (control: FormControl) =>\n        (control.value ? control.value : 0) < 0\n          ? {\n              positiveNumbersOnly: true,\n            }\n          : {},\n      isAsync: false,\n    };\n  }\n\n  getMatchWithOtherControlValidator(messageKey: string, control: FormControl) {\n    return {\n      messageKey: messageKey,\n      check: (formControl: FormControl) => formControl.hasError('fieldsNotMatch'),\n      validator: (formControl: FormControl) =>\n        (formControl.value ? formControl.value : '') !== (control.value ? control.value : '')\n          ? {\n              fieldsNotMatch: true,\n            }\n          : {},\n      isAsync: false,\n    };\n  }\n\n  createUniquenessValidator(uniquenessChecker: (control: string) => Observable<any>, formControl: FormControl) {\n    return formControl.valueChanges\n      .pipe(debounceTime(1000))\n      .pipe(\n        switchMap((value: string) => {\n          return uniquenessChecker(value);\n        })\n      )\n      .pipe(\n        map((found: boolean) => {\n          return !found ? null : { isNotUnique: true };\n        })\n      )\n      .pipe(take(1));\n  }\n\n  getLengthValidator(messageKey: string) {\n    return {\n      messageKey: messageKey,\n      check: (control: FormControl) => control.hasError('minlength'),\n      getMessageInterpolationParams: () => {\n        return {\n          0: environment.passwordRequirements.passwordRequiredLength.toString(),\n        };\n      },\n      validator: Validators.minLength(environment.passwordRequirements.passwordRequiredLength),\n      isAsync: false,\n    };\n  }\n\n  getHasNumberValidator(messageKey: string) {\n    return {\n      messageKey: messageKey,\n      check: (control: FormControl) => control.hasError('hasDigit'),\n\n      validator: (formControl: FormControl) =>\n        environment.passwordRequirements.passwordRequireDigit\n          ? (formControl.value ? formControl.value : '').match(/\\d/)\n            ? {}\n            : { hasDigit: true }\n          : {},\n\n      isAsync: false,\n    };\n  }\n\n  getHasCapitalCaseValidator(messageKey: string) {\n    return {\n      messageKey: messageKey,\n      check: (control: FormControl) => control.hasError('hasCapitalCase'),\n      validator: (formControl: FormControl) =>\n        environment.passwordRequirements.passwordRequireUppercase\n          ? (formControl.value ? formControl.value : '').match(/[A-Z]/)\n            ? {}\n            : { hasCapitalCase: true }\n          : {},\n      isAsync: false,\n    };\n  }\n\n  getHasSmallCaseValidator(messageKey: string) {\n    return {\n      messageKey: messageKey,\n      check: (control: FormControl) => control.hasError('hasCapitalLowerCase'),\n      validator: (formControl: FormControl) =>\n        environment.passwordRequirements.passwordRequireLowercase\n          ? (formControl.value ? formControl.value : '').match(/[a-z]/)\n            ? {}\n            : { hasCapitalLowerCase: true }\n          : {},\n      isAsync: false,\n    };\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { KudosControl } from 'src/app/common/models/control.model';\nimport { KudosValidatorsService } from 'src/app/common/services/validators.service';\nimport { Router } from '@angular/router';\nimport { KudosHttpClientService } from 'src/app/common/services/http-client.service';\nimport { DefaultHttpOptions, KudosRegex, TITLE, TWO_FACTOR_AUTH } from 'src/app/common/constants/constants';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { KudosSessionService } from 'src/app/common/services/session.service';\nimport { RequestData } from 'src/app/common/models/request-data.model';\n// import { AUTH_URL, GET_METADATA_CONFIGURATION, TWO_FACTOR_VALIDATION } from 'src/app/common/constants/constants';\nimport { environment } from 'src/environments/environment';\nimport i18n, { setAppLanguage, TRANS } from 'src/assets/translations';\nimport { Title } from '@angular/platform-browser';\nimport { GenericValidator } from 'src/app/common/validators/generic-validator';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.less'],\n})\nexport class LoginComponent implements OnInit {\n  @Input() errorMessage: string | null = null;\n  enterFunction: any;\n  loginForm: FormGroup = new FormGroup({});\n  displayMessage: { [key: string]: string } = {};\n  private validationMessages: { [key: string]: { [key: string]: string } } = {};\n  private genericValidator: GenericValidator = new GenericValidator({});\n  loginSubscription: Subscription = new Subscription();\n  passwordVisible = false;\n  loading = false;\n\n  constructor(\n    private validatorService: KudosValidatorsService,\n    private router: Router,\n    private http: KudosHttpClientService,\n    private sessionService: KudosSessionService,\n    private titleService: Title,\n    private formBuilder: FormBuilder\n  ) {\n    this.validationMessages = {\n      username: {\n        required: 'Username is required.',\n        pattern: 'Username is not valid.',\n      },\n      password: {\n        required: 'Password is required.',\n      },\n    };\n\n    this.genericValidator = new GenericValidator(this.validationMessages);\n  }\n  ngOnInit() {\n    this.titleService.setTitle(`Login | ${TITLE}`);\n\n    this.loginForm = this.formBuilder.group({\n      username: [null, [Validators.required]],\n      password: [null, [Validators.required]],\n    });\n\n    this.loginSubscription = this.loginForm.valueChanges.subscribe(() => {\n      this.displayMessage = this.genericValidator.processMessages(this.loginForm);\n\n      this.errorMessage = null;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.loginSubscription.unsubscribe();\n  }\n\n  gotoForgotPassword(): void {}\n\n  loginSubmit(): void {\n    for (const i in this.loginForm.controls) {\n      this.loginForm.controls[i].markAsDirty();\n      this.loginForm.controls[i].updateValueAndValidity();\n    }\n\n    if (this.loginForm.valid) {\n      if (this.loginForm.dirty) {\n        this.sessionService.createNewSession();\n        this.router.navigate(['home']);\n      }\n    }\n  }\n}\n","<div class=\"loginContainer\">\n  <div nz-row>\n    <nz-card class=\"cardContainer\">\n      <h3 nz-typography class=\"loginHeaderText\">Log In</h3>\n\n      <form nz-form (ngSubmit)=\"loginSubmit()\" [formGroup]=\"loginForm\" autocomplete=\"off\">\n        <nz-spin [nzSpinning]=\"loading\" [nzIndicator]=\"indicatorTemplate\" nzTip=\"Logging in\">\n          <span nz-text nzType=\"danger\" [ngStyle]=\"{ 'margin-bottom': '5px' }\">{{ errorMessage }}</span>\n\n          <label class=\"loginLabel\">Username</label>\n          <nz-form-item>\n            <nz-form-control [nzErrorTip]=\"displayMessage.username\">\n              <input type=\"email\" nz-input formControlName=\"username\" />\n            </nz-form-control>\n          </nz-form-item>\n\n          <label class=\"loginLabel\">Password</label>\n          <nz-form-item>\n            <nz-form-control [nzErrorTip]=\"displayMessage.password\">\n              <nz-input-group [nzSuffix]=\"suffixTemplate\">\n                <input [type]=\"passwordVisible ? 'text' : 'password'\" nz-input formControlName=\"password\" placeholder=\"Password\" />\n              </nz-input-group>\n            </nz-form-control>\n            <ng-template #suffixTemplate>\n              <i nz-icon [nzType]=\"passwordVisible ? 'eye-invisible' : 'eye'\" (click)=\"passwordVisible = !passwordVisible\"></i>\n            </ng-template>\n          </nz-form-item>\n\n          <nz-form-item>\n            <nz-form-control>\n              <kudos-button [text]=\"'Log In'\" [block]=\"true\"></kudos-button>\n            </nz-form-control>\n          </nz-form-item>\n\n          <nz-form-item>\n            <nz-form-control>\n              <div class=\"forgotPasswordStyle\">\n                <a (click)=\"gotoForgotPassword()\">Forgot password?</a>\n              </div>\n            </nz-form-control>\n          </nz-form-item>\n        </nz-spin>\n      </form>\n    </nz-card>\n  </div>\n</div>\n\n<ng-template #indicatorTemplate>\n  <i nz-icon nzType=\"loading\" class=\"login-loading\"></i>\n</ng-template>\n"]}