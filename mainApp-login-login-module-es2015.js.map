{"version":3,"sources":["./src/app/mainApp/login/login.module.ts","./src/app/mainApp/login/login-routing.module.ts","./src/app/common/services/validators.service.ts","./src/app/mainApp/login/login/login.component.ts","./src/app/mainApp/login/login/login.component.html"],"names":[],"mappings":"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","file":"mainApp-login-login-module-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { KudosCommonImportsModule } from 'src/app/common-imports.module';\nimport { KudosThirdPartyImportsModule } from 'src/app/third-party-imports.module';\nimport { LoginComponent } from './login/login.component';\nimport { LoginRoutingModule } from './login-routing.module';\n\n@NgModule({\n  declarations: [LoginComponent],\n  imports: [KudosThirdPartyImportsModule, LoginRoutingModule, KudosCommonImportsModule],\n  providers: [],\n  bootstrap: [],\n})\nexport class LoginModule {}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LoginRoutingModule {}\n","import { Injectable } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { debounceTime, switchMap, map, take } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { KudosRegex } from '../constants/constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KudosValidatorsService {\n  getRequiredFieldValidator(messageKey: string) {\n    return {\n      messageKey: messageKey,\n      check: (control: FormControl) => control.hasError('required'),\n      validator: Validators.required,\n      isAsync: false,\n    };\n  }\n\n  getEmailFormatValidator(messageKey: string) {\n    return {\n      messageKey,\n      check: (control: FormControl) => control.hasError('pattern'),\n      validator: Validators.pattern(KudosRegex.emailRegex),\n      isAsync: false,\n    };\n  }\n\n  getNumericFieldValidator(messageKey: string) {\n    return {\n      messageKey: messageKey,\n      check: (control: FormControl) => control.hasError('pattern'),\n      validator: Validators.pattern('^[-+]?(0|[1-9][0-9]*)$'),\n      isAsync: false,\n    };\n  }\n\n  getDecimalValidator(messageKey: string, decimals: number = 2) {\n    return {\n      messageKey: messageKey,\n      check: (control: FormControl) => control.hasError('pattern'),\n      validator: Validators.pattern('^-?\\\\d+(\\\\.\\\\d{1,{0}})?$'.replace('{0}', decimals.toString())),\n      isAsync: false,\n    };\n  }\n\n  getEmptySpaceValidator(messageKey: string) {\n    return {\n      messageKey: messageKey,\n      check: (control: FormControl) => control.hasError('emptySpace'),\n      validator: (control: FormControl) =>\n        (control.value ? control.value : 0).toString().trim() == ''\n          ? {\n              emptySpace: true,\n            }\n          : {},\n      isAsync: false,\n    };\n  }\n\n  getPositiveNumbersValidator(messageKey: string) {\n    return {\n      messageKey: messageKey,\n      check: (control: FormControl) => control.hasError('positiveNumbersOnly'),\n      validator: (control: FormControl) =>\n        (control.value ? control.value : 0) < 0\n          ? {\n              positiveNumbersOnly: true,\n            }\n          : {},\n      isAsync: false,\n    };\n  }\n\n  getMatchWithOtherControlValidator(messageKey: string, control: FormControl) {\n    return {\n      messageKey: messageKey,\n      check: (formControl: FormControl) => formControl.hasError('fieldsNotMatch'),\n      validator: (formControl: FormControl) =>\n        (formControl.value ? formControl.value : '') !== (control.value ? control.value : '')\n          ? {\n              fieldsNotMatch: true,\n            }\n          : {},\n      isAsync: false,\n    };\n  }\n\n  createUniquenessValidator(uniquenessChecker: (control: string) => Observable<any>, formControl: FormControl) {\n    return formControl.valueChanges\n      .pipe(debounceTime(1000))\n      .pipe(\n        switchMap((value: string) => {\n          return uniquenessChecker(value);\n        })\n      )\n      .pipe(\n        map((found: boolean) => {\n          return !found ? null : { isNotUnique: true };\n        })\n      )\n      .pipe(take(1));\n  }\n\n  getLengthValidator(messageKey: string) {\n    return {\n      messageKey: messageKey,\n      check: (control: FormControl) => control.hasError('minlength'),\n      getMessageInterpolationParams: () => {\n        return {\n          0: environment.passwordRequirements.passwordRequiredLength.toString(),\n        };\n      },\n      validator: Validators.minLength(environment.passwordRequirements.passwordRequiredLength),\n      isAsync: false,\n    };\n  }\n\n  getHasNumberValidator(messageKey: string) {\n    return {\n      messageKey: messageKey,\n      check: (control: FormControl) => control.hasError('hasDigit'),\n\n      validator: (formControl: FormControl) =>\n        environment.passwordRequirements.passwordRequireDigit\n          ? (formControl.value ? formControl.value : '').match(/\\d/)\n            ? {}\n            : { hasDigit: true }\n          : {},\n\n      isAsync: false,\n    };\n  }\n\n  getHasCapitalCaseValidator(messageKey: string) {\n    return {\n      messageKey: messageKey,\n      check: (control: FormControl) => control.hasError('hasCapitalCase'),\n      validator: (formControl: FormControl) =>\n        environment.passwordRequirements.passwordRequireUppercase\n          ? (formControl.value ? formControl.value : '').match(/[A-Z]/)\n            ? {}\n            : { hasCapitalCase: true }\n          : {},\n      isAsync: false,\n    };\n  }\n\n  getHasSmallCaseValidator(messageKey: string) {\n    return {\n      messageKey: messageKey,\n      check: (control: FormControl) => control.hasError('hasCapitalLowerCase'),\n      validator: (formControl: FormControl) =>\n        environment.passwordRequirements.passwordRequireLowercase\n          ? (formControl.value ? formControl.value : '').match(/[a-z]/)\n            ? {}\n            : { hasCapitalLowerCase: true }\n          : {},\n      isAsync: false,\n    };\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { KudosControl } from 'src/app/common/models/control.model';\nimport { KudosValidatorsService } from 'src/app/common/services/validators.service';\nimport { Router } from '@angular/router';\nimport { KudosHttpClientService } from 'src/app/common/services/http-client.service';\nimport { DefaultHttpOptions, KudosRegex, TITLE, TWO_FACTOR_AUTH } from 'src/app/common/constants/constants';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { KudosSessionService } from 'src/app/common/services/session.service';\nimport { RequestData } from 'src/app/common/models/request-data.model';\n// import { AUTH_URL, GET_METADATA_CONFIGURATION, TWO_FACTOR_VALIDATION } from 'src/app/common/constants/constants';\nimport { environment } from 'src/environments/environment';\nimport i18n, { setAppLanguage, TRANS } from 'src/assets/translations';\nimport { Title } from '@angular/platform-browser';\nimport { GenericValidator } from 'src/app/common/validators/generic-validator';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.less'],\n})\nexport class LoginComponent implements OnInit {\n  @Input() errorMessage: string | null = null;\n  enterFunction: any;\n  loginForm: FormGroup = new FormGroup({});\n  displayMessage: { [key: string]: string } = {};\n  private validationMessages: { [key: string]: { [key: string]: string } } = {};\n  private genericValidator: GenericValidator = new GenericValidator({});\n  loginSubscription: Subscription = new Subscription();\n  passwordVisible = false;\n  loading = false;\n\n  constructor(\n    private validatorService: KudosValidatorsService,\n    private router: Router,\n    private http: KudosHttpClientService,\n    private sessionService: KudosSessionService,\n    private titleService: Title,\n    private formBuilder: FormBuilder\n  ) {\n    this.validationMessages = {\n      username: {\n        required: 'Username is required.',\n        pattern: 'Username is not valid.',\n      },\n      password: {\n        required: 'Password is required.',\n      },\n    };\n\n    this.genericValidator = new GenericValidator(this.validationMessages);\n  }\n  ngOnInit() {\n    this.titleService.setTitle(`Login | ${TITLE}`);\n\n    this.loginForm = this.formBuilder.group({\n      username: [null, [Validators.required]],\n      password: [null, [Validators.required]],\n    });\n\n    this.loginSubscription = this.loginForm.valueChanges.subscribe(() => {\n      this.displayMessage = this.genericValidator.processMessages(this.loginForm);\n\n      this.errorMessage = null;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.loginSubscription.unsubscribe();\n  }\n\n  gotoForgotPassword(): void {}\n\n  loginSubmit(): void {\n    for (const i in this.loginForm.controls) {\n      this.loginForm.controls[i].markAsDirty();\n      this.loginForm.controls[i].updateValueAndValidity();\n    }\n\n    if (this.loginForm.valid) {\n      if (this.loginForm.dirty) {\n        this.sessionService.createNewSession();\n        this.router.navigate(['home']);\n      }\n    }\n  }\n}\n","<div class=\"loginContainer\">\n  <div nz-row>\n    <nz-card class=\"cardContainer\">\n      <h3 nz-typography class=\"loginHeaderText\">Log In</h3>\n\n      <form nz-form (ngSubmit)=\"loginSubmit()\" [formGroup]=\"loginForm\" autocomplete=\"off\">\n        <nz-spin [nzSpinning]=\"loading\" [nzIndicator]=\"indicatorTemplate\" nzTip=\"Logging in\">\n          <span nz-text nzType=\"danger\" [ngStyle]=\"{ 'margin-bottom': '5px' }\">{{ errorMessage }}</span>\n\n          <label class=\"loginLabel\">Username</label>\n          <nz-form-item>\n            <nz-form-control [nzErrorTip]=\"displayMessage.username\">\n              <input type=\"email\" nz-input formControlName=\"username\" />\n            </nz-form-control>\n          </nz-form-item>\n\n          <label class=\"loginLabel\">Password</label>\n          <nz-form-item>\n            <nz-form-control [nzErrorTip]=\"displayMessage.password\">\n              <nz-input-group [nzSuffix]=\"suffixTemplate\">\n                <input [type]=\"passwordVisible ? 'text' : 'password'\" nz-input formControlName=\"password\" placeholder=\"Password\" />\n              </nz-input-group>\n            </nz-form-control>\n            <ng-template #suffixTemplate>\n              <i nz-icon [nzType]=\"passwordVisible ? 'eye-invisible' : 'eye'\" (click)=\"passwordVisible = !passwordVisible\"></i>\n            </ng-template>\n          </nz-form-item>\n\n          <nz-form-item>\n            <nz-form-control>\n              <kudos-button [text]=\"'Log In'\" [block]=\"true\"></kudos-button>\n            </nz-form-control>\n          </nz-form-item>\n\n          <nz-form-item>\n            <nz-form-control>\n              <div class=\"forgotPasswordStyle\">\n                <a (click)=\"gotoForgotPassword()\">Forgot password?</a>\n              </div>\n            </nz-form-control>\n          </nz-form-item>\n        </nz-spin>\n      </form>\n    </nz-card>\n  </div>\n</div>\n\n<ng-template #indicatorTemplate>\n  <i nz-icon nzType=\"loading\" class=\"login-loading\"></i>\n</ng-template>\n"],"sourceRoot":"webpack:///"}