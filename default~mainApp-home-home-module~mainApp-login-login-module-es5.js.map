{"version":3,"sources":["webpack:///src/app/common/components/button/button.component.ts","webpack:///src/app/common/components/button/button.component.html","webpack:///src/app/common-imports.module.ts","webpack:///src/app/common/validators/generic-validator.ts"],"names":["KudosButtonComponent","textKey","text","styles","disabled","color","showIcon","iconName","disableRipple","buttonText","buttonType","block","onButtonClick","addButtonText","event","currentTarget","blur","emit","changes","isFirstChange","previousValue","currentValue","undefined","Error","loadTranslation","click","KudosCommonImportsModule","GenericValidator","validationMessages","container","messages","controlKey","controls","hasOwnProperty","c","childMessages","processMessages","Object","assign","dirty","touched","errors","keys","map","messageKey"],"mappings":"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","file":"default~mainApp-home-home-module~mainApp-login-login-module-es5.js","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter, ViewEncapsulation, SimpleChanges } from '@angular/core';\n\n@Component({\n  selector: 'kudos-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.less'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class KudosButtonComponent implements OnInit {\n  @Input()\n  textKey: string = '';\n\n  @Input()\n  text: string = '';\n\n  @Input()\n  styles: Object = {};\n\n  @Input()\n  disabled: boolean = false;\n\n  @Input()\n  color: string = 'primary';\n\n  @Input()\n  showIcon: boolean = false;\n\n  @Input()\n  iconName: string = '';\n\n  @Input()\n  disableRipple: boolean = false;\n\n  buttonText: string = '';\n\n  @Input()\n  buttonType: any = 'primary';\n\n  @Input()\n  block: boolean = false;\n\n  @Output()\n  onButtonClick: EventEmitter<void>;\n\n  constructor() {\n    this.onButtonClick = new EventEmitter();\n  }\n\n  ngOnInit() {\n    this.addButtonText();\n  }\n\n  click(event: any) {\n    if (!this.disabled) {\n      event.currentTarget.blur();\n      this.onButtonClick.emit(event);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!changes.text.isFirstChange() && changes.text.previousValue !== changes.text.currentValue) {\n      this.addButtonText();\n    }\n  }\n\n  addButtonText() {\n    if (this.textKey === undefined && this.text === undefined) {\n      throw Error('No button text provided.');\n    }\n\n    if (this.text !== undefined) {\n      this.buttonText = this.text;\n    } else {\n      this.loadTranslation();\n    }\n  }\n\n  loadTranslation() {\n    //to be implemented with translation service\n  }\n}\n","<button\n  nz-button\n  [ngClass]=\"{ kudosButtonStyleBlockOn: block, kudosButtonStyle: !block }\"\n  [nzType]=\"buttonType\"\n  [nzBlock]=\"block\"\n  [ngStyle]=\"styles\"\n  (click)=\"click($event)\"\n>\n  {{ buttonText }}\n</button>\n","import { NgModule } from '@angular/core';\nimport { KudosThirdPartyImportsModule } from './third-party-imports.module';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { KudosButtonComponent } from './common/components/button/button.component';\n@NgModule({\n  imports: [KudosThirdPartyImportsModule, CommonModule, ReactiveFormsModule],\n  declarations: [KudosButtonComponent],\n  exports: [CommonModule, ReactiveFormsModule, KudosButtonComponent],\n  providers: [],\n  entryComponents: [],\n})\nexport class KudosCommonImportsModule {}\n","import { FormGroup } from '@angular/forms';\n\n// Generic validator for Reactive forms\n// Implemented as a class, not a service, so it can retain state for multiple forms.\nexport class GenericValidator {\n  // Provide the set of valid validation messages\n  // Stucture:\n  // controlName1: {\n  //     validationRuleName1: 'Validation Message.',\n  //     validationRuleName2: 'Validation Message.'\n  // },\n  // controlName2: {\n  //     validationRuleName1: 'Validation Message.',\n  //     validationRuleName2: 'Validation Message.'\n  // }\n  constructor(private validationMessages: { [key: string]: { [key: string]: string } }) {}\n\n  // Processes each control within a FormGroup\n  // And returns a set of validation messages to display\n  // Structure\n  // controlName1: 'Validation Message.',\n  // controlName2: 'Validation Message.'\n  processMessages(container: FormGroup): { [key: string]: string } {\n    const messages: any = {};\n    for (const controlKey in container.controls) {\n      if (container.controls.hasOwnProperty(controlKey)) {\n        const c = container.controls[controlKey];\n        // If it is a FormGroup, process its child controls.\n        if (c instanceof FormGroup) {\n          const childMessages = this.processMessages(c);\n          Object.assign(messages, childMessages);\n        } else {\n          // Only validate if there are validation messages for the control\n          if (this.validationMessages[controlKey]) {\n            messages[controlKey] = '';\n            if ((c.dirty || c.touched) && c.errors) {\n              Object.keys(c.errors).map((messageKey) => {\n                if (this.validationMessages[controlKey][messageKey]) {\n                  messages[controlKey] += this.validationMessages[controlKey][messageKey] + ' ';\n                }\n              });\n            }\n          }\n        }\n      }\n    }\n    return messages;\n  }\n}\n"]}